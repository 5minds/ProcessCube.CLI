name: All CI Tests

on:
  push:
    branches:
      - '*'
      - '*/*'
      
permissions:
  contents: write  # Changed from 'read' to 'write' for releases
  packages: read 

env:
  CI_TOOLS_VERSION: '^5.0.0'
  # NOTE: Um die Entwicklungsphase von Alpha nach Beta zu ändern, einfach die nachfolgend deklarierten Env Variablen switchen.
  # CI_TOOLS_ALPHA_BRANCH: next
  # CI_TOOLS_ALPHA_NPM_TAG: next
  CI_TOOLS_BETA_BRANCH: next
  CI_TOOLS_BETA_NPM_TAG: next
  BOX_RELEASE_TAG: 2025-1

jobs:
  build_test_and_publish_linux:
    runs-on: ubuntu-latest
    if: "!(contains(github.actor, 'process-engine-ci') || contains(github.actor, 'admin'))"

    services:
      atlas_engine:
        image: ghcr.io/5minds/processcube_engine:19
        credentials:
          username: ${{ secrets.GH_CI_USER_NAME }}
          password: ${{ secrets.GH_CI_USER_TOKEN }} 
        ports:
          - 10560:80
        options: --health-cmd true --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Use Node.js 22.x
        uses: actions/setup-node@v5
        with:
          node-version: 22.x
          registry-url: 'https://registry.npmjs.org'

      - name: Install CI Tools
        run: npm i -g @5minds/product_ci_tools@${{ env.CI_TOOLS_VERSION }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 'Install dependencies'
        run: npm ci

      - name: Prepare version
        run: |
          ci_tools prepare-version --allow-dirty-workdir

      - name: 'Build sources'
        run: npm run build

      # Build binaries: Hybrid approach for macOS (SEA with PKG fallback), pkg for others  
      - name: 'Build cross-platform binaries'
        run: |
          # Build standard pkg binaries for Linux and Windows
          npm run build && npx pkg dist/pc.js --out-path=dist/binary --targets=latest-linux-x64,latest-win-x64
          
          # Build macOS binaries using hybrid approach (SEA with PKG fallback)
          npm run build:sea
          mkdir -p dist/binary
          
          # Function to build macOS binary with SEA fallback to PKG
          build_macos_binary() {
            local arch=$1
            local target_name="pc-macos-${arch}"
            
            echo "Building ${target_name}..."
            
            # Copy Node.js binary
            cp $(which node) "dist/binary/${target_name}"
            
            # Try SEA injection with overwrite flag
            if npx postject "dist/binary/${target_name}" NODE_SEA_BLOB dist/pc.blob \
                --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2 \
                --macho-segment-name NODE_SEA \
                --overwrite 2>/dev/null; then
              echo "✅ SEA binary created for ${arch}"
            else
              echo "⚠️ SEA failed, falling back to PKG for ${arch}..."
              rm -f "dist/binary/${target_name}"
              npx pkg dist/pc.js --out-path=dist/binary --targets="latest-macos-${arch}"
              # PKG creates binary with generic name, rename it
              if [ -f dist/binary/pc ]; then
                mv dist/binary/pc "dist/binary/${target_name}"
                echo "✅ PKG fallback binary created for ${arch}"
              fi
            fi
          }
          
          # Build for both architectures
          build_macos_binary "x64"
          build_macos_binary "arm64"

      - name: 'Run unit tests'
        run: npm run test:unit

      # - name: 'Run integration tests'
      #   run: npm run test:integration

      - name: 'Commit & tag version'
        run: |
          ci_tools commit-and-tag-version --only-on-primary-branches
          ci_tools update-github-release --only-on-primary-branches --use-title-and-text-from-git-tag
        env:
          GH_USER: 'process-engine-ci'
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Prepare Version Infos
        id: get_version
        run: |
          echo "VERSION=$(ci_tools get-version)" >> "$GITHUB_OUTPUT"
          echo "MAJOR_VERSION=$(ci_tools get-version --major)" >> "$GITHUB_OUTPUT"

      # NEW: Upload binaries to GitHub Release
      - name: 'Upload binaries to release'
        if: "!startsWith(github.ref_name, 'renovate') && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/next' || github.ref == 'refs/heads/develop')"
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/binary/pc-linux-x64
            dist/binary/pc-macos-x64
            dist/binary/pc-macos-arm64
            dist/binary/pc-win-x64.exe
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: ProcessCube CLI ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## ProcessCube CLI Release
            
            ### 🚀 Standalone Binaries (No Node.js required)
            
            | Platform | Architecture | Binary Type | Download |
            |----------|-------------|-------------|----------|
            | Linux | x64 | PKG | `pc-linux-x64` |
            | macOS | Intel (x64) | SEA/PKG* | `pc-macos-x64` |
            | macOS | Apple Silicon | SEA/PKG* | `pc-macos-arm64` |
            | Windows | x64 | PKG | `pc-win-x64.exe` |
            
            **\* Hybrid Build:** Prefers SEA (Single Executable Application), falls back to PKG if needed
            
            ### 📦 Quick Installation
            
            **Linux:**
            ```bash
            # Download and install
            curl -L -o pc https://github.com/5minds/ProcessCube.CLI/releases/download/v${{ steps.get_version.outputs.VERSION }}/pc-linux-x64
            chmod +x pc
            sudo mv pc /usr/local/bin/
            pc --help
            ```

            **macOS (Intel) - Optimized Binary:**
            ```bash
            # Download and install (optimized for macOS)
            curl -L -o pc https://github.com/5minds/ProcessCube.CLI/releases/download/v${{ steps.get_version.outputs.VERSION }}/pc-macos-x64
            chmod +x pc
            # May show security dialog on first run - allow in System Preferences
            sudo mv pc /usr/local/bin/
            pc --help
            ```
            
            **macOS (ARM) - Optimized Binary:**
            ```bash
            # Download and install (optimized for macOS)
            curl -L -o pc https://github.com/5minds/ProcessCube.CLI/releases/download/v${{ steps.get_version.outputs.VERSION }}/pc-macos-arm64
            chmod +x pc
            # May show security dialog on first run - allow in System Preferences
            sudo mv pc /usr/local/bin/
            pc --help
            ```
            

            **Windows:**
            ```powershell
            # Download and run
            Invoke-WebRequest -Uri "https://github.com/5minds/ProcessCube.CLI/releases/download/v${{ steps.get_version.outputs.VERSION }}/pc-win-x64.exe" -OutFile "pc.exe"
            .\pc.exe --help
            ```
            
            ### ✨ Features
            - ✅ No Node.js installation required
            - ✅ All 19 CLI commands available
            - ✅ Cross-platform compatibility
            - ✅ Single file deployment
            - ✅ Ready for enterprise use
            - ✅ macOS optimized binaries (SEA preferred, PKG fallback)
            - ✅ Minimized code signing issues
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: 'Publish version'
        if: "!startsWith(github.ref_name, 'renovate')"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: ci_tools publish-npm-package --create-tag-from-branch-name
